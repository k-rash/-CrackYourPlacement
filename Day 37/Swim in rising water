class Solution:
    def swimInWater(self, grid: List[List[int]]) -> int:
        pq = [(grid[0][0], 0, 0)]
        dire = [(0,1), (0,-1), (1,0), (-1,0)]
        n = len(grid)
        v = [[False] * n for _ in range(n)]
        
        while pq:
            up, x, y = heapq.heappop(pq)
            if v[x][y]:
                continue
            if x == n-1 and y == n-1:
                return up
            v[x][y] = True
            for dx, dy in dire:
                X, Y = x + dx, y + dy
                if 0 <= X < n and 0 <= Y < n and not v[X][Y]:
                    heapq.heappush(pq, (max(up, grid[X][Y]), X, Y))
        
        return 0
        
