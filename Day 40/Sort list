# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not (head and head.next):
            return head
        lt=head
        rt=self.midval(head) 
        tmp=rt.next
        rt.next=None
        rt=tmp

        lt=self.sortList(lt)
        rt=self.sortList(rt)
        return self.merge(lt,rt)                                   
        
    def midval(self,head):
        s,f=head,head.next
        while f and f.next:
            s=s.next
            f=f.next.next
        return s

    def merge(self,l1,l2):
        dup=tail=ListNode()
        while l1 and l2:
            if l1.val>l2.val:
                tail.next=l2
                l2=l2.next
            else:
                tail.next=l1
                l1=l1.next 
            tail=tail.next
        if l1:
            tail.next=l1
        if l2:
            tail.next=l2
        return dup.next               
