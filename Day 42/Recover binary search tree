# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        cur,pre = root ,TreeNode(float('-inf'))
        rep,st = [],[]
        
        while cur or st:
            while cur:
                st.append(cur)
                cur= cur.left
            tmp = st.pop()
            
            if tmp.val < pre.val:
                rep.append((pre, tmp))
            pre = tmp
            cur = tmp.right
        
        rep[0][0].val, rep[-1][1].val = rep[-1][1].val, rep[0][0].val 
